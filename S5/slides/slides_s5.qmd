---
title: "Python pour les SHS"
subtitle: "Statistiques et visualisations"
author: "Émilien Schultz"
#format: pptx
format:
    revealjs:
        slideNumber: true
---


## Faire des traitements plus avancées

- Pandas ++ exploration
- Mais :
    - Comment faire les statistiques habituelles en SHS (tableaux croisés, etc.)
    - Comment mener des analyses plus poussées (modèles...) ?
    - Comment mettre correctement en forme un graphique ?

---

## L'avantage compétitif de R

Pas mal d'opérations vraiment **statistiques** sont plus laborieuses en Python qu'en R. 

Pourquoi ?

- Moins de communautés "statistiques"
- Orientation plus "prédiction" que "description"


# Statistiques

## Les statistiques **univariées**

Pandas est efficace pour 

- Les indicateurs univariés
- Tri à plat / distributions

Mais pas pour les tests statistiques, ex. normalité

```python
from scipy.stats import normaltest
stat, p = normaltest(data)
```

---

## Les statistiques bivariées

- Calculer une corrélation linéaire
    - Pandas méthode `.corr`
    - Scipy `scipy.stats.pearsonr`

- Calculer une ANOVA
    - Scipy `scipy.statsf_oneway`
    - Pingouin `pingouin.anova`

- Faire un tableau croisé
    - Pandas méthode `.crosstab`
    - Test Scipy `scipy.stats.chi2_contingency`



---

## Manipuler des tableaux

- Possibilité de construire ses tableaux
- Puis les combiner
- Exemple avec la méthode `pandas.concat`
- Manque encore quelques outils (exemple de `PySHS`)

---

## Statistiques avancées

Une diversité de traitements spécialisés

- Modélisation
    - Régression linéaire, logistique, ...
- Exploration
    - ACP, ACM, ...
- Classification
    - KNN, ...

Trouver la bonne bibliothèque pour faire le traitement

---

## Dépend du domaine

![](./img/metrodatascience.png){fig-align="center" width="120%"}

---

## Régression logistique binomiale

*Rappel : une régression logistique = modélisation d'une variable binaire où on régresse une fonction spécifique (la fonction logit) de la probabilité de la variable d'avoir les valeurs 1/0 comme une combinaison linéaire des variables indépendantes.*

$$
P(Y = 1 \mid \mathbf{X}) = \frac{1}{1 + e^{-(\beta_0 + \beta_1 X_1 + \beta_2 X_2 + \cdots + \beta_p X_p)}}
$$

---

## En pratique

il faut donc :

- une variable dépendante binaire
- des variables indépendantes catégorielles ou continues
- une manière de faire l'estimation des paramètres
- avoir une sortie interprétable

---

## Plusieurs solutions en Python

- Sklearn : `sklearn.linear_model.LogisticRegression`
- Statsmodel : `statsmodels.api.Logit`

Regarder la documentation ; pas forcément parfaitement adapté à nos besoins.

- Contruire ses propres outils `Pyshs`

---

## Les choses évoluent : ex. de Prince

![](./img/prince.png){fig-align="center"}

---

## En synthèse

- Python très bon pour la manipulation des données et les traitements statistiques courants
- Pas toujours présenté dans la manière la plus accessible
- Certains traitements absents (modèles avec pondérations, etc.)

# Visualisations


## Un domaine vaste

À la croisée entre design & statistiques

![](./img/tufty.png){fig-align="center"}

---

## L'importance des couleurs

![](./img/rainbow.png){fig-align="center"}

---

## Exemple de l'effet des couleurs


![](./img/colormaps.png)

[Rainbow Colormaps: What are They Good and Bad for?](https://ieeexplore.ieee.org/abstract/document/9919390?casa_token=ecMCemd2ZRwAAAAA:NcEJsqolbRXdy_K72GlMh9ucNP6-0hm-nMXam_HlLgd6ijY2aXEqSLGW_I3PyinhIjoseDE82B1dgUU)




---

## Plein de "règles"

[Rougier NP, Droettboom M, Bourne PE (2014) Ten Simple Rules for Better Figures. PLoS Comput Biol 10(9): e1003833](https://doi.org/10.1371/journal.pcbi.1003833)

::: columns
::: column
1. Know Your Audience  
2. Identify Your Message  
3. Adapt the Figure to the Support Medium  
4. Captions Are Not Optional  
5. Do Not Trust the Defaults  
:::

::: column
6. Use Color Effectively  
7. Do Not Mislead the Reader  
8. Avoid “Chartjunk”  
9. Message Trumps Beauty  
10. Get the Right Tool  
:::
:::


---

## Des "règles" … adaptables
![](./img/regles_vs_guidelines.jpg){fig-align="center"}


---


## De nombreuses possibilités

![Nicolas Rougier, *Scientific Visualization: Python + Matplotlib*, p.19](./img/visualisation.png){fig-align="center"}


---

## Avoir une idée de ce qu'on peut faire

Les galeries :

- [Python Graph Gallery](https://python-graph-gallery.com/)
- [Gallerie Matplotlib](https://matplotlib.org/2.0.2/gallery.html)
- [Data to Viz](https://www.data-to-viz.com/) (plus généraliste, arbre décision visualisation)

Beaucoup de code disponible


---

## Matplotlib comme brique historique



![](img/matplotlibhistory.png){fig-align="center"}

[Link](https://matplotlib.org/stable/project/history.html)


---

## Une philosophie dédiée

- Une "grammaire" graphique spécifique
- Pas forcément "évidente"
- Un équilibre à trouver entre :
    - Rapidité (choix out of the box)
    - Précision (contrôler tous les paramètres)

[Nicolas Rougier, *Scientific Visualization: Python + Matplotlib*](https://inria.hal.science/hal-03427242)

---

## On peut aller loin

- Disposition spatiale (juxtaposition, différents graphiques, tailles, couleurs, ...)
- Les éléments à afficher (possible de mettre point par point des éléments)
- Contrôler chaque élément (graduation, police, etc.)

---

![](./img/exemple.png){fig-align="center"}


---

## Structure de Matplotlib

![](./img/anatomy.png){fig-align="center"}


---

##  Ça se complique :

- Création d'une figure :
    - explicitement (orienté objet)
    - implicitement (impératif, crée un contexte de figure)
- Plusieurs manières "conventionnelles" d'usage
- Beaucoup, beaucoup d'options ...


---


## Intégrer le javascript et l'interactivité

D'autres solutions qui permettent de créer des visualisations interactives

- portabilité vers des supports internet
- d'autres grammaires

---

## Exemple de Plotly

- [Plotly](https://plotly.com/python/) : des visualisations interactives
- "Plotly's Python graphing library makes interactive, publication-quality graphs."
- Sans trop d'effort (même si on peut faire des choses complexes)
- (également disponible en R, Julia, etc.)


![](./img/plotly.svg){fig-align="center"}

---

## Plotly

[Tutorial complet de Programming Historian](https://programminghistorian.org/en/lessons/interactive-visualization-with-plotly)

- Plusieurs "niveaux" dans Plotly :
    - de l'interface "haut-niveau" pour la visualisation ([plotly express](https://plotly.com/python/plotly-express/))
    - aux éléments "bas-niveau" pour triturer les figures
- *i.e.* : des [submlodules](https://plotly.com/python-api-reference/index.html#submodules) :
    - plotly.express
    - plotly.graph_objects
    - ...


---

## Attention : différents modèles économiques en FOS

*As a company with roots in the open-source community, Plotly introduced web-based data visualization to Python. Today, the company offers Dash Enterprise, which provides the best software tools and platform to enable every enterprise in the world to build and scale data applications quickly and easily.*

[Jetez un coup d'oeil](https://plotly.com/about-us/)



---

## Adapter suivant vos besoins

- Figure rapide exploratoire
    - `Pandas`
- Finaliser une figure statique complexe
    - `Matplotlib`
- Visualisation interactive à destination web
    - `Plotly`


---

## Démarche pour une belle figure

- Partir de l'objectif, pas de ce que vous savez faire
- Itération
- Décomposer les éléments, et progressivement agréger
- Respecter des règles
    - Générales de graphisme
    - Spécifiques de la visualisation scientifique
